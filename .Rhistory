sessionInfo()
#!/bin/bash
echo "Hello, RStudio Shell Script!"
cat("hello from cat\n")
message("hello from message")
print("hello from print")
warning("hello from warning")
stop("hello from stop")
ls
pwd
Sys.setenv(LANGUAGE = "en")
Sys.setenv(LANGUAGE = "en")
cat("hello from cat\n")
message("hello from message")
print("hello from print")
warning("hello from warning")
stop("hello from stop")
Sys.setenv(LANGUAGE = "en")
cat("hello from cat\n")
message("hello from message")
print("hello from print")
warning("hello from warning")
stop("hello from stop")
cat("hello from cat\n 111")
ls
installed.packages()["rmarkdown", ]
"rmarkdown" %in% rownames(installed.packages())
install.packages("rmarkdown")
"rmarkdown" %in% rownames(installed.packages())
## code chunks
```{r, name-of-chunk}
```{r, read-data-from-web}
url_for_data <- "http://bit.ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
url_for_data <- "http://bit.ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
```{r,read-data-from-web}
```{r, read_data_from_web}
```{r read_data_from_web}
```{r, read_data_from_web}
```{r,read-data-from-web}
url_for_data <- "http://bit.ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
url_for_data <- "http://bit.ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
data <- read.csv(url_for_data, header = TRUE)
head(data)
tinytex::install_tinytex()
N
Y
tinytex::install_tinytex()
Sys.Date()
format(Sys.Date(), "%Y-%m-%d")
format(Sys.Date(), "%m-%d-%Y")
# Load necessary packages
library(ggplot2)
library(tidyverse)
install.packages(tidyverse)
install.packages
install.packages(tidyverse)
data_url <- "https://bit.ly/vrc01_data"
data <- read.csv(data_url, header = TRUE)
install.packages("here")
```{r, here-i-am}
mod <- glm(
ab_resistance ~ shield_glycans + region + env_length,
data = data
)
library(knitr)
opts_chunk$set(
echo = FALSE, warning = FALSE, message = FALSE
)
data_url <- "https://bit.ly/vrc01_data"
data <- read.csv(data_url, header = TRUE)
data <- read.csv(data_url, header = TRUE)
library(labelled)
library(gtsummary)
var_label(data) <- list(
id = "ID",
ab_resistance = "Antibody resistance",
shield_glycans = "Shield glycans",
region = "Region",
env_length = "Length of Env protein"
)
data$number_glycans <- ifelse(data$shield_glycans < 4, "< 4", ">= 4")
data |>
select("region", "env_length", "ab_resistance", "number_glycans") |>
tbl_summary(by = number_glycans) |>
modify_spanning_header(c("stat_1", "stat_2") ~ "**PNGs in Glycan Shield**") |>
add_overall() |>
add_p()
#| fig.align = "center",
#| out.width = "100px"
library(ggplot2)
ggplot(data, aes(x = shield_glycans, y = ab_resistance)) +
geom_point() +
geom_smooth(method = lm) +
theme_bw()
mod <- glm(
ab_resistance ~ shield_glycans + region + env_length,
data = data
)
tbl_regression(mod) |>
add_global_p()
1
library(knitr)
opts_chunk$set(
echo = FALSE, warning = FALSE, message = FALSE
)
data_url <- "https://bit.ly/vrc01_data"
data <- read.csv(data_url, header = TRUE)
library(labelled)
library(gtsummary)
var_label(data) <- list(
id = "ID",
ab_resistance = "Antibody resistance",
shield_glycans = "Shield glycans",
region = "Region",
env_length = "Length of Env protein"
)
data$number_glycans <- ifelse(data$shield_glycans < 4, "< 4", ">= 4")
data |>
select("region", "env_length", "ab_resistance", "number_glycans") |>
tbl_summary(by = number_glycans) |>
modify_spanning_header(c("stat_1", "stat_2") ~ "**PNGs in Glycan Shield**") |>
add_overall() |>
add_p()
#| fig.align = "center",
#| out.width = "100px"
library(ggplot2)
ggplot(data, aes(x = shield_glycans, y = ab_resistance)) +
geom_point() +
geom_smooth(method = lm) +
theme_bw()
library(knitr)
library(dplyr)
# Ensure data is available
if (!exists("data")) stop("Error: 'data' does not exist.")
if (!is.data.frame(data)) stop("Error: 'data' is not a data frame.")
data <- na.omit(data)  # Remove missing values to avoid model errors
# Fit the model
mod <- glm(
ab_resistance ~ shield_glycans + region + env_length,
data = data
)
# Extract the regression coefficients table
table_data <- summary(mod)$coefficients
# Convert to a data frame for formatting
table_data <- as.data.frame(table_data)
# Round all numeric values to 2 decimal places
table_data <- table_data %>%
mutate(across(everything(), ~ round(., 2)))
# Replace p-values less than 0.01 with "<0.01"
table_data$`Pr(>|t|)` <- ifelse(table_data$`Pr(>|t|)` < 0.01, "<0.01", table_data$`Pr(>|t|)`)
# Modify variable names for better readability
rownames(table_data) <- gsub("\\(Intercept\\)", "$\\beta_0$", rownames(table_data)) # LaTeX notation for intercept
rownames(table_data) <- gsub("shield_glycans", "Shield Glycans", rownames(table_data))
rownames(table_data) <- gsub("region", "Region", rownames(table_data))
rownames(table_data) <- gsub("env_length", "Envelope Length", rownames(table_data))
# Display the table using knitr::kable
kable(table_data, format = "html", caption = "Regression Results")
binary_mod <- glm(
I(ab_resistance > params$cutpoint) ~ shield_glycans + region + env_length,
data = data,
family = binomial()
)
tbl_regression(binary_mod, exponentiate = TRUE) |>
add_global_p()
#question 1-use IML to check my results
# 1. 读取数据
X1 <- c(7, 4, 16, 3, 21, 8)
X2 <- c(33, 41, 7, 49, 5, 31)
Y <- c(42, 33, 75, 28, 91, 55)
# 2. 线性回归模型
model <- lm(Y ~ X1 + X2)
# 3. 查看回归系数
summary(model)
# 4. 检查残差
residuals(model)
# 5. 计算预测值
new_data <- data.frame(X1 = 10, X2 = 30)
predict(model, newdata = new_data, se.fit = TRUE)
#question 2 求 F值对应的p
# df
df1 <- 2
df2 <- 59
# assign F_value
F_value <- 36.44
# calculate p_value
p_value <- 1 - pf(F_value, df1, df2)
# output p_value
p_value
df1 <- 1
df2 <- 60
# assign F_value
F_value <- 36.44
# calculate p_value
p_value <- 1 - pf(F_value, df1, df2)
# output p_value
p_value
df1 <- 1
df2 <- 60
# assign F_value
F_value <- 22.16
# calculate p_value
p_value <- 1 - pf(F_value, df1, df2)
# output p_value
p_value
df1 <- 1
df2 <- 59
# assign F_value
F_value <- 37.31
# calculate p_value
p_value <- 1 - pf(F_value, df1, df2)
# output p_value
p_value
df1 <- 3
df2 <- 58
# assign F_value
F_value <- 72.46
# calculate p_value
p_value <- 1 - pf(F_value, df1, df2)
# output p_value
p_value
load("~/data550-test1-repo/README.md")
print("hello world")
getwd()
setwd("C:\Users\段丽辉\Desktop\study abroad\Emory\202501-202505\DATA 550 Data science Toolkit\Final Project\final-project")
setwd("C:/Users/段丽辉/Desktop/study abroad/Emory/202501-202505/DATA 550 Data science Toolkit/Final Project/final-project")
getwd()
install.packages("renv")
renv::init()
getwd()
getwd()
renv::activate()
renv::install("rmarkdown")
renv::snapshot()
renv::status()
renv::activate()
renv::install(c("rmarkdown","knitr"), type = "source", rebuild = TRUE)
getwd()
renv::snapshot(type = "source")
renv::activate()                                   # 进入项目
renv::install(c("rmarkdown", "knitr"),             # 用源码版重装
type = "source", rebuild = TRUE)
renv::snapshot()
grep -A2 '"Package": "rmarkdown"' renv.lock
renv::activate()                              # 确保在项目环境
lf <- renv::lockfile_read("renv.lock")        # 读锁文件
lf$Packages$rmarkdown$OS_type
lf <- renv::lockfile_read("renv.lock")
lf$Packages$rmarkdown$OS_type
lf$Packages$knitr$OS_type
getwd()
renv::install("rmarkdown")  # 确保安装到项目库
y
renv::snapshot()
renv::install("rmarkdown")
renv::snapshot()
renv::init()
